
Amount of Space or Time taken up by an algo/code 
as function of input size


==================
Big O Notation
==================
- upper bound
- worst case complexity
- f(n) = O(g(n))


==================
Big Omega Notation
==================
- lower bound
- best case complexity
- f(n) = O(g(n))

====================
common complexity
==================
- o(2^n) < O(n^2) < O(n) < O(logn) < O(1)
- recursion - exponential O(2^n)


====================
Space complexity
==================
- input space + auxillary space 
- merge sort is worst than quick sort in space complexity
- mergsort sc - O(n) |  quicksort sc - O(1)
- mergsort tc - O(nlogn) |  quicksort tc - O(n^2)


=====================================================================
- Binary Search - n/2^k =1
    TC - O(logn)

============================
Recursive Algorithms
==========================

- Total Work Done = no of calls * work in each call
- SC = (max depth * memory in each call)

- Factorial of no.  - TC=> O(n) use total work done  SC=>O(n)
- Fibnacci of no.  - 
    f(n) = f(n-1) + f(n-2)
    T(n) = T(n-1) + T(n-2) + k
    T(n-1) = T(n-2) + T(n-3) + k
    T(n-2) = T(n-3) + T(n-4) + k
    SC- O(n)   TC=O(2^n)

- Merge Sort
    T(n) = T(n/2) + T(n/2) + n  
    T(n) = 2T(n/2) + n  
    T(n/2) = 2T(n/4) + n/2  
    T(1) = O(1)
    n/2^x = 1      x= level of tree
    log2n=X   TC= O(nlogn)






